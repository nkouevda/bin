#!/usr/bin/env bash

set -euo pipefail

usage() {
  cat <<EOF
usage: git link [<options>] [--] [<rev>]

Print a link for <rev> (any commit-ish, e.g. "main").

If no <rev> is given, default to "HEAD".

Options:
    -h, --help
        Show this help message and exit.
EOF
}

while (( $# )); do
  case "$1" in
    -h|--help)
      usage
      exit
      ;;
    --)
      shift
      break
      ;;
    -*)
      printf "error: invalid option: %s\n" "$1" >&2
      exit 1
      ;;
    *)
      break
      ;;
  esac

  shift
done

rev="${1:-HEAD}"
sha="$(git rev-parse --verify "$rev^{commit}")"
subject="$(git log -n 1 --pretty='format:%s' "$sha")"
body="$(git log -n 1 --pretty='format:%b' "$sha")"

# e.g. Gerrit
link="$(sed -n '/^Reviewed-on: / { s///; p; q; }' <<<"$body")"
if [[ -n "$link" ]]; then
  exec printf "%s\n" "$link"
fi

# Phabricator
link="$(sed -n '/^Differential Revision: / { s///; p; q; }' <<<"$body")"
if [[ -n "$link" ]]; then
  exec printf "%s\n" "$link"
fi

remote="$(git remote get-url origin)"

case "$remote" in
  # GitHub
  *github.com*)
    repo="$(sed -E 's/^.*github\.com(:[0-9]+)?[:/]([A-Za-z0-9_-]+\/[A-Za-z0-9_.-]+)$/\2/' <<<"$remote")"
    pr="$(sed -nE '/^.*\(#([0-9]+)\)$/ { s//\1/; p; q; }' <<<"$subject")"
    if [[ -n "$pr" ]]; then
      exec printf "https://github.com/%s/pull/%s\n" "${repo%.git}" "$pr"
    else
      exec printf "https://github.com/%s/commit/%s\n" "${repo%.git}" "$sha"
    fi
    ;;
  # Unsupported
  *)
    printf "error: unsupported remote type: %s\n" "$remote" >&2
    exit 1
    ;;
esac
