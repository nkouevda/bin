#!/usr/bin/env bash

set -euo pipefail

usage() {
  cat <<EOF
usage: git author-stat-pre-process [<options>] [-- <git log args>]

Pre-process git log for git author-stat-cached.

Options:
    -h, --help
        Show this help message and exit.

Arguments after -- are passed to git log.

Examples:
    git author-stat-pre-process > .git/author-stat-cache
EOF
}

force=
update=

while (( $# )); do
  case "$1" in
    -h|--help)
      usage
      exit
      ;;
    -f|--force)
      force="1"
      ;;
    -u|--update)
      update="1"
      ;;
    --)
      shift
      break
      ;;
    -*)
      printf "error: invalid option: %s\n" "$1" >&2
      exit 1
      ;;
    *)
      break
      ;;
  esac

  shift
done

git_log_args=("$@")
cache_file=".git/author-stat-cache"

if [[ -r "$cache_file" ]]; then
  if [[ -n "$force" ]]; then
    # No-op
    :
  elif [[ -n "$update" ]]; then
    last_hash="$(head -n 1 "$cache_file" | awk '{ print $1 }')"
    git_log_args+=("$last_hash..")
    mv "$cache_file" "$cache_file.old"
  else
    printf "error: %s exists, and neither --force nor --update specified\n" "$cache_file" >&2
    exit 1
  fi
else
  # Ignore options if cache doesn't exist anyway
  force=
  update=
fi

# This should be `"${git_log_args[@]}"`, but bash < 4.4 treats empty arrays as unbound (i.e.
# `git_log_args=()` under `set -u` would result in "unbound variable" here), so we hack around that
# with `${git_log_args[@]:+"${git_log_args[@]}"}`
git log --pretty='format:commit %H %aE' --numstat ${git_log_args[@]:+"${git_log_args[@]}"} \
  | awk '
    BEGIN {
      OFS = "\t"
    }

    ($1 == "commit") {
      hash = $2
      author = $3
      adds = 0
      dels = 0
    }

    /^[0-9]/ {
      adds += $1
      dels += $2
    }

    /^$/ {
      print hash, author, adds, dels
    }

    END {
      if (hash) {
        print hash, author, adds, dels
      }
    }' > "$cache_file"

if [[ -n "$update" ]]; then
  mv "$cache_file" "$cache_file.new"
  cat "$cache_file.new" "$cache_file.old" > "$cache_file"
fi
